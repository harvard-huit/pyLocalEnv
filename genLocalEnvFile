#!/usr/bin/env python

#from ast import Str
import boto3
from botocore.exceptions import ClientError
import os, yaml
import argparse



class UserNamespace(object):
    pass

def get_secret(secret_name,region_name="us-east-1"):
    session = boto3.session.Session()
    client = session.client(
        service_name='secretsmanager',
        region_name=region_name,
    )

    try:
        get_secret_value_response = client.get_secret_value(
            SecretId=secret_name
        )
    except ClientError as e:
        print(e.response['Error']['Code'])
        if e.response['Error']['Code'] == 'ResourceNotFoundException':
            print("The requested secret " + secret_name + " was not found")
        elif e.response['Error']['Code'] == 'InvalidRequestException':
            print("The request was invalid due to:", e)
        elif e.response['Error']['Code'] == 'InvalidParameterException':
            print("The request had invalid params:", e)
        elif e.response['Error']['Code'] == 'DecryptionFailure':
            print("The requested secret can't be decrypted using the provided KMS key:", e)
        elif e.response['Error']['Code'] == 'InternalServiceError':
            print("An error occurred on service side:", e)
    else:
        # Secrets Manager decrypts the secret value using the associated KMS CMK
        # Depending on whether the secret was a string or binary, only one of these fields will be populated
        if 'SecretString' in get_secret_value_response:
            text_secret_data = get_secret_value_response['SecretString']
            return text_secret_data 
        else:
            binary_secret_data = get_secret_value_response['SecretBinary']
            return binary_secret_data

def checkAWSToken():
    status=True
    sts = boto3.client('sts')
    try:
        sts.get_caller_identity()
    except ClientError as e:
        if e.response['Error']['Code'] == 'ExpiredToken':
            print("The AWS Token has expired. Please login to the AWS CLI and try again.")
            status=False
    return status
    
def readAnsibleVarsfile(filename):
    with open(filename, 'r') as f1:
        return yaml.safe_load(f1.read())

def generateEnvFile(stack,filetype,filename):
    data=readAnsibleVarsfile(filename)
    envtext=""
    bashText=""
    with open(".env",'w') as f1:
        if 'target_app_secrets_ref' in data:
            for itm in data['target_app_secrets_ref']:
                for i in itm:
                    secret_name="{0}/{1}".format(stack,itm[i])
                    value=get_secret(secret_name)
                    if '\n' in value:
                        envtext= envtext + "{0}={1}\n".format(i,repr(value))
                    else:
                        envtext= envtext + "{0}={1}\n".format(i,value)
                    bashText= bashText + "export {0}='{1}'\n".format(i,value)
                    #print(envtext)
        if 'target_app_env' in data:
            for itm in data['target_app_env']:
                envtext=envtext + "{0}={1}\n".format(itm['name'],itm['value'])
                bashText= bashText + "export {0}='{1}'\n".format(itm['name'],itm['value'])
        if filetype != 'docker':
            f1.write(bashText)
        else:
            f1.write(envtext)
    # with open(".env_local",'w') as f1:
    #     f1.write(bashText)


if __name__ == '__main__':
    user_namespace = UserNamespace()
    parser = argparse.ArgumentParser(add_help=False)
    parser.add_argument("-s","--stack", type=str,default="dev",
                        help="stack(default='dev')")
    parser.add_argument("-t","--type", type=str,default="docker",
                        help="Type of file creation shell or docker(default='docker')")
    parser.parse_known_args(namespace=user_namespace)
    parser1 = argparse.ArgumentParser(description="Create 'env' file for local development.", 
    parents=[parser])
    parser1.add_argument("-f","--filename", type=str, 
                        default="{0}/k8s_vars/{1}_k8s_vars.yml".format(os.getcwd(),user_namespace.stack) ,
                        help="""Specific filename to pass in k8s vars yaml file. 
                                Default: {current directory}/k8s_vars/{stack}_k8s_vars.yml
                                """)
    args=parser1.parse_args()
    if checkAWSToken():
        generateEnvFile(args.stack,args.type, args.filename)

